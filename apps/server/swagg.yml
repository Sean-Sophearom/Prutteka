openapi: 3.0.3
info:
  title: Prutteka API
  description: An api for our app Prutteka
  version: v1

tags:
  - name: User
    description: operations relating to users
  - name: Event
    description: operations relating to events

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: (Work in progress)

paths:
  /events/{id}/interested:
    post:
      tags: [Event]
      summary: Add an event to interested list
      description: Add a new event to the user **Interested** list
      parameters:
        - $ref: '#/components/parameters/authHeader'
        - in: path
          name: id
          schema:
            type: string
            example: '1'
          required: true
          description: the id of the **event**
      responses:
        '200':
          description: Success
        '401':
          $ref: '#/components/responses/401'
    delete:
      tags: [Event]
      summary: Remove an event from interested list
      description: Remove an event from user's *interested list*
      parameters:
        - $ref: '#/components/parameters/authHeader'
        - in: path
          name: id
          schema:
            type: string
            example: '1'
          required: true
          description: the id of the **event**
      responses:
        '204':
          description: Success
        '401':
          $ref: '#/components/responses/401'

  /events/{id}:
    get:
      tags: [Event]
      summary: Get a single event
      description: Get a single event based on the id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '3'
          required: true
          description: the id of the **event**
      responses:
        '404':
          description: No event found with the provided id
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      tags: [Event]
      summary: Delete an event
      description: Delete an event based on the id
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '3'
          required: true
          description: the id of the **event**
      responses:
        '200':
          description: Success

    patch:
      tags: [Event]
      summary: Edit an Event
      description: |
        Owner can edit their event's detail

        Require **Authentication**
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '3'
          required: true
          description: the id of the **event**
        - $ref: '#components/parameters/authHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '401':
          $ref: '#components/responses/401'
        '400':
          description: Missing required field
        '204':
          description: Success

  /events:
    post:
      tags: [Event]
      summary: Submit an event
      description: Submit an event
      parameters:
        - $ref: '#/components/parameters/authHeader'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '401':
          description: Not logged in
        '400':
          description: Missing required field
        '200':
          description: Event submitted successfully
          content:
            applicaion/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: '3'
    get:
      tags: [Event]
      summary: Get a list of Events
      description: Get available Events. User can pass in query such as location, category, page and search.
      parameters:
        - in: query
          name: search
          schema:
            type: string
            example: 'event name'
          description: Keyword to filter based on event title
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            example: '1'
          description: The number of page to offset the search results - default to 1
        - in: query
          name: category
          schema:
            type: string
            example: 'Technology'
          description: Similiar to search but more specific
        - in: query
          name: location
          schema:
            type: string
            example: 'Phnom Penh'
          description: The location (province) of the event
      responses:
        '200':
          description: Return an array of events based on the provided query
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /users/notification:
    get:
      tags: [User]
      summary: Get all user notifications
      description: |
        Return all the user notifications

        Needs **Authentication**!
      parameters:
        - $ref: '#/components/parameters/authHeader'
      responses:
        '200':
          description: Success
          content:
            applicaion/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      example: 'Event name'

  /users/{id}:
    get:
      tags: [User]
      summary: Get all user events
      description: |
        Return all the events that belong to the user.

        No Needs **Authentication**!
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '1'
          required: true
          description: the id of the **user**
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
        '404':
          description: No user with this id found.
  /users/{id}/follow:
    post:
      tags: [User]
      summary: Follow user
      description: User can follow another user
      parameters:
        - in: path
          name: id
          schema:
            type: string
            example: '1'
          required: true
          description: the id of the **user**
        - $ref: '#/components/parameters/authHeader'
      responses:
        '200':
          description: Success

  /events/interested:
    get:
      tags: [User]
      summary: Get all interested events
      description: Get all the events that the user has marked as **Interested**
      parameters:
        - $ref: '#/components/parameters/authHeader'
      responses:
        '401':
          $ref: '#/components/responses/401'
        '200':
          description: Success
          content:
            applicaion/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /register:
    post:
      tags: [User]
      summary: Register an account
      description: Register with name email and password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'User name'
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: '12345678'
      responses:
        '400':
          description: Missing email, name or password or email already exists or password too short
        '201':
          description: Successfully **Registered**
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  id:
                    type: string
                    example: '1'
                  name:
                    type: string
                    example: 'User name'
                  accessToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'
                  refreshToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

  /login:
    post:
      tags: [User]
      summary: Login to start using our app
      description: Login with Email and Password to get a **jwt** back
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  example: '12345678'

      responses:
        '404':
          description: No user with this **email** found
        '401':
          description: Incorrect password
        '400':
          description: Missing email or password
        '201':
          description: Successfully **Logged in**
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                  id:
                    type: string
                    example: '1'
                  name:
                    type: string
                    example: 'User name'
                  accessToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

                  refreshToken:
                    type: string
                    example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

components:
  responses:
    '401':
      description: Not logged in or Invalid Authorization Token

  parameters:
    authHeader:
      in: header
      name: Authorization
      required: true
      schema:
        type: string
        format: Bearer
        example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c'

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Example Username
        email:
          type: string
          format: email
          example: example@gmail.com
        password:
          type: string
          example: secure_password
    Event:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: object
          properties:
            en:
              type: string
              example: Example Event 2022
            kh:
              type: string
              example: ព្រឹត្តិការណ៍ឧទាហរណ៍
        type:
          type: string
          example: Online
        category:
          type: string
          example: Music
        detail:
          type: object
          properties:
            en:
              type: string
              example: Example event details
            kh:
              type: string
              example: ពិព៌ណនាពីព្រឹត្តិការណ៍
        isNested:
          type: boolean
          example: true
        dateTime:
          type: object
          properties:
            startDate:
              type: string
              example: 2023-01-26T00:00:00.000Z
              format: date-time
            endDate:
              type: string
              example: 2023-01-29T00:00:00.000Z
              format: date-time
            startTime:
              type: string
              example: '07:00'
              format: time
            endTime:
              type: string
              example: '17:00'
              format: time
            hasCustomTime:
              type: boolean
              example: true
            customTimes:
              type: array
              items:
                type: object
                properties:
                  startTime:
                    type: string
                    example: '07:00'
                  endTime:
                    type: string
                    example: '18:00'

        locations:
          type: array
          items:
            type: object
            properties:
              name:
                type: object
                properties:
                  en:
                    type: string
                    example: 'Phnom Penh'
                  kh:
                    type: string
                    example: 'ភ្នំពេញ'
              link:
                type: string
                example: 'Google map'
        schedule:
          type: object
          properties:
            sharedSchedule:
              type: array
              items:
                type: object
                properties:
                  startTime:
                    type: string
                    example: '07:00'
                  endTime:
                    type: string
                    example: '18:00'
                  activity:
                    type: object
                    properties:
                      en:
                        type: string
                        example: 'Exhibition'
                      kh:
                        type: string
                        example: 'តាំងពិព័រណ៍'
            hasCustomSchedule:
              type: boolean
            customSchedules:
              type: array
              items:
                type: object
                properties:
                  startTime:
                    type: string
                    example: '07:00'
                  endTime:
                    type: string
                    example: '18:00'
                  activity:
                    type: object
                    properties:
                      en:
                        type: string
                        example: 'Exhibition'
                      kh:
                        type: string
                        example: 'តាំងពិព័រណ៍'

        joinMethods:
          type: array
          items:
            type: object
            properties:
              method:
                type: object
                properties:
                  en:
                    type: string
                    example: 'Get ticket now'
                  kh:
                    type: string
                    example: 'ចូលរួមឥឡូវនេះ'
              link:
                type: string
                example: 'https://example.com'
